[metadata]
name = wafo
summary = Wave Analysis for Fatigue and Oceanography
author = WAFO-group
author-email = none
license = GPLv3
home-page = http://www.maths.lth.se/matstat/wafo/
description-file = README.rst
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = Development Status :: 4 - Beta,
              Programming Language :: Python,
              Programming Language :: Python :: 2.7,
              Programming Language :: Python :: 3.4,
              Programming Language :: Python :: 3.5,
              Environment :: Console,
              Intended Audience :: Education,
              Intended Audience :: Science/Research,
              License :: OSI Approved :: GPL License,
              Operating System :: OS Independent,
              Operating System :: POSIX :: Linux,
              Operating System :: Unix,
              Operating System :: MacOS,
              Operating System :: Microsoft :: Windows
              Topic :: Scientific/Engineering :: Mathematics

[entry_points]
# Add here console scripts like:
# console_scripts =
#     hello_world = wafo.module:function
# as well as other entry_points.


[files]
# Add here 'data_files', 'packages' or 'namespace_packages'.
# Additional data files are defined as key value pairs of source and target:
packages =
    wafo
# data_files =
#    share/wafo_docs = docs/*

[extras]
# Add here additional requirements for extra features, like:
# PDF =
#    ReportLab>=1.2
#    RXP

[test]
# py.test options when running `python setup.py test`
addopts =
  wafo
  wafo/spectrum
  wafo/transform
  wafo/covariance
  wafo/wave_theory
  wafo/tests
  wafo/covariance/tests
  wafo/spectrum/tests
  wafo/covariance/tests
  wafo/transform/tests
  wafo/wave_theory/tests
# wafo/stats/tests

[pytest]
doctest_optionflags = NORMALIZE_WHITESPACE ELLIPSIS
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
#    --cov wafo --cov-report term-missing
#    --verbose
    --doctest-modules
    --pep8

norecursedirs =
    .*
    _build
    doc
    docs
    tmp*
    source
    stats  # postpone testing of stats

pep8ignore =
    tests/*.py ALL
    MSO.py ALL
    MSPPT.py ALL

[aliases]
docs = build_sphinx

[bdist_wheel]
# Use this option if your package is pure-python
universal = 0

[build_sphinx]
source_dir = docs
build_dir = docs/_build

[pbr]
# Let pbr run sphinx-apidoc
autodoc_tree_index_modules = True
# autodoc_tree_excludes = ...
# Let pbr itself generate the apidoc
# autodoc_index_modules = True
# autodoc_exclude_modules = ...
# Convert warnings to errors
# warnerrors = True

[devpi:upload]
# Options for the devpi: PyPI serer and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
format = bdist_wheel
